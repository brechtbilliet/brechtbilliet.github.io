I"ï/<p>Hi there, since it‚Äôs very busy lately this will probably be my one of my shortest articles ever.
Maybe that‚Äôs a good thing, because now you don‚Äôt have an excuse not to read it. It‚Äôs short, compact
and maybe you will learn a thing or two.</p>

<h2 id="the-problem">The problem</h2>

<p>The article is all about making sure our HTTP calls don‚Äôt die on bad connections, since strangely enough, <strong>404 responses can kill your application when using RxJS</strong>.</p>

<p>Remember that RxJS observables have 3 types of events right?</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">next</code>: passing in a new value into the observable</li>
  <li><code class="language-plaintext highlighter-rouge">error</code>: when an error occurs</li>
  <li><code class="language-plaintext highlighter-rouge">complete</code>: When the observable is completed</li>
</ul>

<p>We should not forget that <strong>an Error event will actually stop the observable</strong>. It will cease to exist.</p>

<p>You might say: ‚ÄúThat‚Äôs not that bad, we‚Äôll just create a new one every time we want to fetch data‚Äù.</p>

<p>When you are approaching your application the <em>reactive way</em>, this scenario might be problematic:
Imagine a typeahead search where we want to retrieve results for every input value. We have an observable of searchterms and we trigger the
HTTP request for every value using a <code class="language-plaintext highlighter-rouge">switchMap</code>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// this observable contains the values</span>
<span class="c1">// of what the user is searching for</span>
<span class="c1">// over time</span>
<span class="kd">const</span> <span class="nx">searchTerm$</span><span class="p">:</span> <span class="nx">Observable</span><span class="o">&lt;</span><span class="kr">string</span><span class="o">&gt;</span><span class="p">;</span>

<span class="c1">// when the term receives a new value...</span>
<span class="c1">// go fetch some data</span>
<span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> <span class="nf">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">))</span>
<span class="p">)</span>

<span class="c1">// subscribe to the observable to start listening</span>
<span class="nx">results$</span><span class="p">.</span><span class="nf">subscribe</span><span class="p">((</span><span class="nx">response</span><span class="p">:</span> <span class="nx">Result</span><span class="p">[])</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></div></div>
<p>This all works fine, until an error happens in the observable. This could come from a bad connection, server down-time or anything that went wrong during the HTTP request (500, 404, ‚Ä¶) 
If the user is having a bad connection which might result in a <code class="language-plaintext highlighter-rouge">404</code>, the observable will stop and the application will be broken. The user can search for results as much as he or she wants, the HTTP calls will never happen again.</p>

<h2 id="catcherror">catchError</h2>

<p>We could use the <code class="language-plaintext highlighter-rouge">catchError</code> operator that will basically catch the error for us, and return a brand new observable(containing the error).
That observable will have the error as a value, instead of throwing it again as an error.
That way we could actually show the user a decent message.
This might look something like this:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
        <span class="nf">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nf">pipe</span><span class="p">(</span>
            <span class="c1">// return an observable with the error inside</span>
            <span class="nf">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nf">of</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
<span class="nx">results$</span><span class="p">.</span><span class="nf">subscribe</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">response</span><span class="p">:</span> <span class="nx">Result</span><span class="p">[]</span> <span class="o">|</span> <span class="nx">HttpErrorResponse</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">if</span><span class="p">(</span><span class="nx">response</span> <span class="k">instanceof</span> <span class="nx">HttpErrorResponse</span><span class="p">){</span>
            <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">oh no:(</span><span class="dl">'</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">do something fancy</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Ps: I‚Äôm not trying to say that this is the best idea to catch errors. I‚Äôm just showing you around some basics.</p>

<p>Do note that the <code class="language-plaintext highlighter-rouge">catchError</code> operator is applied to the result observable that <code class="language-plaintext highlighter-rouge">fetchData()</code> returns, and not added as the second operator of the first pipe. 
From the moment an observable receives an error, it will die‚Ä¶ That‚Äôs why it‚Äôs important to catch the error on the inner observable.</p>

<h2 id="retrywhen">retryWhen</h2>

<p>Ok, great! The application won‚Äôt break anymore, but now imagine the following scenario: Our user is sitting in the train and drives through a tunnel. The connection is gone for a few seconds and the user won‚Äôt get results.</p>

<p>We could fix that by telling RxJS to retry a few times</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
        <span class="nf">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nf">pipe</span><span class="p">(</span>
            <span class="nf">retryWhen</span><span class="p">(</span><span class="nx">e$</span> <span class="o">=&gt;</span> <span class="nx">e$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
                <span class="c1">// try again after 2 seconds</span>
                <span class="nf">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">),</span>
                <span class="c1">// stop trying after 5 times</span>
                <span class="nf">take</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
            <span class="p">)</span>
            <span class="c1">// still keep the observable alive if</span>
            <span class="c1">// the first 5 times fail</span>
            <span class="nf">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nf">of</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>You can find more information about <code class="language-plaintext highlighter-rouge">retryWhen</code><a href="https://www.learnrxjs.io/operators/error_handling/retrywhen.html">here</a></p>

<h2 id="using-the-online-event">Using the online event</h2>

<p>Even though this is a good solution, there is room for improvement. A great choice is to use the <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/Online_and_offline_events">online</a> event from HTML5 to tell the browser to retry when the user regains internet connection. It‚Äôs even shorter than before and it‚Äôs super elegant</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">results$</span> <span class="o">=</span> <span class="nx">searchTerm$</span><span class="p">.</span><span class="nf">pipe</span><span class="p">(</span>
    <span class="nf">switchMap</span><span class="p">(</span><span class="nx">term</span> <span class="o">=&gt;</span> 
        <span class="nf">fetchData</span><span class="p">(</span><span class="nx">term</span><span class="p">).</span><span class="nf">pipe</span><span class="p">(</span>
            <span class="nf">retryWhen</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">fromEvent</span><span class="p">(</span><span class="nb">window</span><span class="p">,</span> <span class="dl">'</span><span class="s1">online</span><span class="dl">'</span><span class="p">))</span>
            <span class="c1">// still keep the observable alive if</span>
            <span class="c1">// the server would return a different</span>
            <span class="c1">// HTTP error</span>
            <span class="nf">catchError</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="nf">of</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span>
        <span class="p">)</span>
    <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>RxJS gives us great control over HTTP calls! If we know how error handling works it becomes a breeze to take our HTTP calls to the next level.
This doesn‚Äôt only apply to typeahead searches but to every observable where we combine an existing stream with an error-affected one like HTTP. For instance: this can also happen in NgRx effects or with the angular router.</p>

<p>There, I told you it would be short, I hope you learned something though.</p>

<p>Also be sure to check this article: <a href="https://blog.angularindepth.com/power-of-rxjs-when-using-exponential-backoff-a4b8bde276b0">Power of RxJS when using exponential backoff</a></p>

<h2 id="special-thanks">Special thanks</h2>

<ul>
  <li><a href="https://twitter.com/AmarildoKurtaj">@AmarildoKurtaj</a> The last example was based on his idea</li>
</ul>

<p>Reviewers:</p>
<ul>
  <li><a href="https://twitter.com/fmalcher01">Ferdinand Malcher</a></li>
  <li><a href="https://twitter.com/FabianGosebrink">Fabian Gosebrink</a></li>
  <li><a href="https://twitter.com/tim_deschryver">Tim deschryver</a></li>
  <li><a href="https://twitter.com/webdave_de">David M√ºllerchen</a></li>
  <li><a href="https://twitter.com/rubenverm">Ruben Vermeulen</a></li>
</ul>
:ET