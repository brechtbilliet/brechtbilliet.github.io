I"ì{<h2 id="about-this-article">About this article</h2>

<p>This article contains a set of opinionated guidelines when it comes to building monorepos with <a href="https://nrwl.io/nx">Nx</a>.
I wrote this article because when I used Nx in the beginning, I struggled a lot with how to structure my workspace, and Iâ€™ve hit quite a few walls. That being said, Iâ€™ve been using it for a while now, and I finally have the feeling that Iâ€™ve reached a structure where I feel comfortable with.</p>

<h2 id="a-word-about-nx">A word about Nx</h2>

<p>Nx is a thin layer on top of the <a href="https://angular.io">Angular</a> CLI that helps us with structuring large applications in the form of monorepos.
A monorepo contains only one <a href="https://nrwl.io/nx/guide-nx-workspace">Nx workspace</a> that can contain multiple apps and multiple libs (we will refer to apps and libs as Nx projects). An app is a deployable unit and a lib is meant to contain the actual logic that can be shared across the workspace. Nx is actively being developed and updated along with Angular by the amazing people of <a href="https://nrwl.io/">Nrwl</a>.</p>

<p>Nx is especially valuable when managing <strong>big Angular applications</strong> that have a lot of shared functionality, but even in smaller projects it can help organize your approach.</p>

<p>At StrongBrew we are using this technology for a bunch of our clients and even though Nx is already pretty opinionated, I decided to write down some best practices and guidelines that I try to take in consideration.</p>

<p>The rules and guidelines written down in this article <strong>might work for you</strong>, and should in no circumstances be treated as the <em>ultimate truth</em>. Best practices and guidelines are mostly a matter of perception and personal preference. Nevertheless, I would love to share how I architect large Angular applications with Nx.</p>

<h2 id="barrel-files">Barrel files</h2>

<p>When it comes to managing monorepos, barrel files are quite important.
A barrel file is a <code class="language-plaintext highlighter-rouge">index.ts</code> file that lives in the <code class="language-plaintext highlighter-rouge">src</code> directory of every Nx lib and is meant to expose logic to the rest of the workspace.</p>

<p>This file is really important when you understand one of the big potential risks of organizing code in monorepos - overexposure of implementation details.</p>

<p>With code being located right next to each other, it can be easy to import code with deeply nested relative paths and include things that the original author of the code never intended to be used outside of their specific context.</p>

<p>The Nx libâ€™s <code class="language-plaintext highlighter-rouge">index.ts</code> file allows each lib to define its effective public API - only symbols which are explicitly exported from this file should be eligible for consumption in other parts of the workspace.</p>

<p>Letâ€™s say that we have a <code class="language-plaintext highlighter-rouge">@strongbrew/users</code> lib which exposes a <code class="language-plaintext highlighter-rouge">UserService</code>â€¦
This is what the barrel file from  <code class="language-plaintext highlighter-rouge">@strongbrew/users</code> might look like.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// libs/users/src/index.ts</span>
<span class="k">export</span> <span class="o">*</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./lib/services/user.service</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>Although this might seem pretty straight forward, letâ€™s go over a few best-practicesâ€¦</p>

<h3 id="dont-ever-import-a-lib-from-a-relative-path">Donâ€™t ever import a lib from a relative path</h3>

<p>When we want to import <code class="language-plaintext highlighter-rouge">UserService</code> inside another lib or app, we want to import it from <code class="language-plaintext highlighter-rouge">@strongbrew/users</code>. This is way cleaner then importing it from a relative path like <code class="language-plaintext highlighter-rouge">../../../users/lib/src/index.ts</code> and helps protect us from the overexposure problem described above. Nx also provides a linting rule out of the box to make sure that you are respecting a libâ€™s API and not doing deep imports.</p>

<p>Nx uses TypeScript <a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping">path mapping</a> to map these module names to the correct barrel files.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"paths"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"@strongbrew/users"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"libs/users/src/index.ts"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="only-1-barrel-file-per-lib">Only 1 barrel file per lib</h3>

<p>Itâ€™s a known fact that barrel files might become big, but it gives us a central place of handling all the exports + it drastically reduces the chance of getting circular reference errors. Therefore, a lib should only contain 1 single barrel file.</p>

<h3 id="never-let-a-lib-import-from-its-own-barrel-file">Never let a lib import from its own Barrel file</h3>

<p>The TypeScript modules within a particular lib should not care what functionality that lib exposes, so it shouldnâ€™t use its own barrel file at any point.</p>

<p>If a module imports something from its own barrel file, it almost always results in circular reference errors. Therefore, imports from inside of the module should use relative path imports.</p>

<h2 id="structuring-the-workspace">Structuring the workspace</h2>

<p>When using Nx, we might already get pushed in an opinionated way of working, which is great. But how are we going to structure the workspace itself? For instance, looking into a directory of 100 libs inside of a libs directory might not really be pragmatic to work withâ€¦</p>

<h3 id="structuring-apps">Structuring apps</h3>

<h4 id="an-app-should-be-an-empty-shell">An app should be an empty shell</h4>

<p>Apps are deployable units that wire the different pieces of an application together. These apps are nearly empty shells that use libs to build an entire application. Therefore <strong>an app holds almost no logic</strong> and mostly uses lazy loading to load feature libs. Some feature libs can be seen as microfrontends.
That being said, our apps mostly not completely empty. In general they also contain:</p>
<ul>
  <li>The general layout (composed out of components from â€˜ui-kitâ€™)</li>
  <li>Routing</li>
</ul>

<h4 id="keep-the-apps-directory-as-flat-as-possible">Keep the apps directory as flat as possible</h4>

<p>Chances are small that our monorepo will contain 100+ apps and even if it does, chances are small that we can divide these apps into categories.</p>

<h4 id="apps-should-not-import-from-other-apps">Apps should not import from other apps</h4>

<p>Although it might seem obvious, letâ€™s mention it anywayâ€¦ Shared logic should always live inside of libs, an not inside of apps. Apps are specific deployment targets.</p>

<h3 id="structuring-libs">Structuring libs</h3>

<p>Here comes the opinionated part, lets check how we can structure the libs inside of our workspace.</p>

<p>The directory structure of our workspace might look like this:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apps</code></li>
  <li><code class="language-plaintext highlighter-rouge">libs</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">feature</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>â€¦</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>â€¦</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>â€¦</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">ui-kit</code></li>
      <li><code class="language-plaintext highlighter-rouge">utils</code></li>
    </ul>
  </li>
  <li>A feature contains logic specific to a certain domain, like managing users or performing authentication.</li>
  <li>On the other hand, the <code class="language-plaintext highlighter-rouge">utils</code> lib contains logic that doesnâ€™t have anything to do with any domain, E.g: HTTP interceptors, shared RxJS operators, a service that handles notifications etcâ€¦ Consider it a toolkit for your workspace.</li>
</ul>

<p>In the next few sections we are going to cover the 3 types of feature libs, the <code class="language-plaintext highlighter-rouge">ui-kit</code> lib and the <code class="language-plaintext highlighter-rouge">utils</code> lib.</p>

<h4 id="featureapi">feature/api</h4>

<p>This directory contains Nx libs with a very specific purpose:</p>
<ul>
  <li>These libs contain <strong>api logic</strong> or <strong>business logic</strong> that needs to be shared.</li>
  <li>These libs contain the types of the REST responses. Letâ€™s call them <strong>domain types</strong>.</li>
  <li>If we want to work with models, or dtoâ€™s, these would also live here.</li>
</ul>

<p>Having a specific api lib is very handy when developing in a microservices platform. Every microservice would have its own <strong>api lib</strong> that can be used throughout the entire monorepo.</p>

<p>Another common use-case is that feature libs tend to use domain types from other feature libs. By extracting these domain types in to api libs, we solve that problem. That way, these domain types can be shared across different places inside of the monorepo.</p>

<h4 id="featurelazy">feature/lazy</h4>

<p>This directory contains all feature libs that can be lazyloaded. To make sure these libs can be lazy-loaded, they should expose an <code class="language-plaintext highlighter-rouge">NgModule</code> in the barrel file and are loaded as such:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">RouterModule</span><span class="p">.</span><span class="nf">forRoot</span><span class="p">([</span>
    <span class="p">{</span>
        <span class="na">path</span><span class="p">:</span> <span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">loadChildren</span><span class="p">:</span> <span class="dl">'</span><span class="s1">@strongbrew/feature/lazy/users</span><span class="dl">'</span>
    <span class="p">}</span>
<span class="p">])</span>
</code></pre></div></div>

<p>One of the advantages is that these modules can be loaded on demand or even preloaded upfront. The biggest advantage though is that these modules are completely standalone, and donâ€™t share anything with the rest of the workspace. This means they have nothing inside of their barrel file, other then the <code class="language-plaintext highlighter-rouge">NgModule</code> being exported. 
<strong>Lazy loaded modules can never share logic with the workspace</strong>
If we feel that a lazyloaded module needs to export something, we should extract that logic into a separate <code class="language-plaintext highlighter-rouge">feature/shared</code> or <code class="language-plaintext highlighter-rouge">feature/api</code> lib.</p>

<p>When a <code class="language-plaintext highlighter-rouge">feature/lazy</code> module needs to perform XHR calls it should delegate it to a <code class="language-plaintext highlighter-rouge">feature/api</code> lib. Therefore a <code class="language-plaintext highlighter-rouge">feature/lazy</code> lib should never contain api logic.</p>

<p>When using a statemanagement library like <a href="https://github.com/ngrx/platform">ngrx/store</a>, <code class="language-plaintext highlighter-rouge">feature/lazy</code> libs would contain their own reducers and use <code class="language-plaintext highlighter-rouge">store.forFeature()</code> to attach these to the <code class="language-plaintext highlighter-rouge">store</code> instance. This would result in lazy-loaded reducers.</p>

<h4 id="featureshared">feature/shared</h4>

<p>Not every feature can be lazyloaded. Think about feature logic that needs to be shared for instance. In that case we would create an Nx lib that lives inside of the <code class="language-plaintext highlighter-rouge">feature/shared</code> directory.</p>

<p>When a <code class="language-plaintext highlighter-rouge">feature/shared</code> module needs to perform XHR calls it should delegate it to a <code class="language-plaintext highlighter-rouge">feature/api</code> lib. Therefore the <code class="language-plaintext highlighter-rouge">feature/lazy</code> lib should not contain api logic.</p>

<h4 id="ui-kit">ui-kit</h4>

<p>This lib contains all the shared presentational components that can be used in different applications. Think about dropdowns, datepickers and empty modals. A <code class="language-plaintext highlighter-rouge">user-detail</code> component for instance does NOT belong here. A monorepo can contain multiple <code class="language-plaintext highlighter-rouge">ui-kit</code> libraries. We should name them according to its purpose. E.g <code class="language-plaintext highlighter-rouge">ui-kit-mobile</code> is a common use case.</p>

<p>The Ui-kit module contains an <code class="language-plaintext highlighter-rouge">ngModule</code> since we need it to declare and export our components/directives. The barrel file generally only exposes the <code class="language-plaintext highlighter-rouge">ngModule</code> since this is the vessel used to export the functionality.</p>

<p>However, a <code class="language-plaintext highlighter-rouge">ui-kit</code> might also export certain types in its barrel fileâ€¦ Like <code class="language-plaintext highlighter-rouge">DatepickerConfiguration</code> or other <code class="language-plaintext highlighter-rouge">ui-kit</code> specific types.</p>

<h4 id="utils">utils</h4>

<p>This lib can contain all kinds of utilities. It could contain shared interceptors, guards, services and custom RxJS operators. Think about it als a framework toolbox that could benefit any application. We will NOT use an <code class="language-plaintext highlighter-rouge">ngModule</code> here for tree-shaking purposes.</p>

<p>A <code class="language-plaintext highlighter-rouge">utils</code> lib will not contain any components. But if it contains pipes or directives we might need an <code class="language-plaintext highlighter-rouge">ngModule</code> for that.</p>

<p>When your workspace is small, one single <code class="language-plaintext highlighter-rouge">utils</code> lib might suffice, but it could become a good idea to split these up when the <code class="language-plaintext highlighter-rouge">utils</code> lib gets to big.</p>

<p>After splitting up, the directory structure of our workspace might look like this:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apps</code></li>
  <li><code class="language-plaintext highlighter-rouge">libs</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">feature</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>â€¦</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>â€¦</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>â€¦</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">ui-kit</code></li>
      <li><code class="language-plaintext highlighter-rouge">utils</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">rxjs-operators</code></li>
          <li><code class="language-plaintext highlighter-rouge">forms</code></li>
          <li><code class="language-plaintext highlighter-rouge">http</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>Do note, that the <code class="language-plaintext highlighter-rouge">forms</code> lib would not contain any forms or forms configuration, but it would contain general form logic that can be shared across the workspace.</p>

<h3 id="prefixing-libs">Prefixing libs</h3>

<p>Because of the fact that <code class="language-plaintext highlighter-rouge">selector</code> names for components and directives should be unique, prefixing them in a monorepo is quite important. 
Since every project in the <code class="language-plaintext highlighter-rouge">angular.json</code> file has a <code class="language-plaintext highlighter-rouge">prefix</code> property, we could set that prefix for every project.</p>

<p>Letâ€™s assume that we need a <code class="language-plaintext highlighter-rouge">feature/shared</code> lib called <code class="language-plaintext highlighter-rouge">messages</code> then we could generate that lib by running <code class="language-plaintext highlighter-rouge">ng g lib messages --prefix sh-mes</code> for instance. 
<code class="language-plaintext highlighter-rouge">sh-mes</code> would be the prefix and if we create a message component in this lib it would have the selector: <code class="language-plaintext highlighter-rouge">sh-mes-message</code>.</p>

<h2 id="linting-and-tags">Linting and tags</h2>

<p>One thing that is absolutely critical when managing a monorepo is being able to determine, categorize, and constrain/run commands based on a dependency graph.</p>

<p>Nx determines the dependency graph for us out of the box, it infers it by statically analyzing our TypeScript import and export statements (as well as a few other things specific to the Angular CLI).</p>

<p>It has no way of automatically categorizing the dependency graph for it, because that is up to our subjective judgement, but it does provide helpers to make it easy.</p>

<p>Nx provides us with the ability to add tags to the different libs and apps and apply <a href="https://palantir.github.io/tslint/">tslint</a> rules to make sure we canâ€™t import whatever we want wherever we want.	Nx provides us with the ability to add tags to the different libs and apps and apply <a href="https://palantir.github.io/tslint/">tslint</a> rules to make sure we canâ€™t import whatever we want wherever we want (potentially leading to circular references and other problems (broken lazyloading, etcâ€¦)).</p>

<p>Tags can be added to projects in the <code class="language-plaintext highlighter-rouge">nx.json</code> file of the root directory.
Tags can be determined in numerous ways. Some of us might like a tag per team, other might like it per domain.</p>

<p>I like to have tags for every lib type. It might be opinionated but it works fine for me (again, thatâ€™s a matter of personal preference)</p>

<p>We define 5 types of tags:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">app</code>: This tag is added to all the apps</li>
  <li><code class="language-plaintext highlighter-rouge">shared</code>: This tag is added to <code class="language-plaintext highlighter-rouge">uikit</code> and <code class="language-plaintext highlighter-rouge">utils</code> libs</li>
  <li><code class="language-plaintext highlighter-rouge">feature:lazy</code>: This tag is added to <code class="language-plaintext highlighter-rouge">feature/lazy</code> libs</li>
  <li><code class="language-plaintext highlighter-rouge">feature:shared</code>: This tag is added to <code class="language-plaintext highlighter-rouge">feature/shared</code> libs</li>
  <li><code class="language-plaintext highlighter-rouge">feature:api</code>: This tag is added to <code class="language-plaintext highlighter-rouge">feature/api</code> libs</li>
</ul>

<p>The rules could be the same for every workspace that we will create in the future:</p>

<ul>
  <li>Projects with the type <code class="language-plaintext highlighter-rouge">tag</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code> or <code class="language-plaintext highlighter-rouge">feature:shared</code>.</li>
  <li>Projects with the type <code class="language-plaintext highlighter-rouge">shared</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code> (we donâ€™t want to import domain specific logic in there do we?)</li>
  <li>Projects with the type <code class="language-plaintext highlighter-rouge">feature:lazy</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code>, <code class="language-plaintext highlighter-rouge">feature:shared</code> and <code class="language-plaintext highlighter-rouge">feature:api</code>.</li>
  <li>Projects with the type: <code class="language-plaintext highlighter-rouge">feature:shared</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">shared</code> and <code class="language-plaintext highlighter-rouge">feature:api</code>.</li>
  <li>Projects with the type: <code class="language-plaintext highlighter-rouge">feature:api</code> can only depend on projects with the tags: <code class="language-plaintext highlighter-rouge">feature:api</code> and <code class="language-plaintext highlighter-rouge">shared</code>. (we never want to load <code class="language-plaintext highlighter-rouge">feature:shared</code> into an feature/api lib right?)</li>
</ul>

<h3 id="configuring-tslint">Configuring tslint</h3>

<p>To configure the tslint we have to use the <code class="language-plaintext highlighter-rouge">nx-enforce-module-boundaries</code> rule from tslint. If you like the rules defined above, you can just copy-paste the module boundaries defined below right in your <code class="language-plaintext highlighter-rouge">tslint.json</code> file that lives in the root directory.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"nx-enforce-module-boundaries"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
  </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"allow"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
      </span><span class="nl">"depConstraints"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"app"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"shared"</span><span class="p">,</span><span class="w"> </span><span class="s2">"feature:shared"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"shared"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"shared"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feature:lazy"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
          </span><span class="s2">"shared"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"feature:shared"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"feature:api"</span><span class="w">
        </span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feature:api"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"feature:api"</span><span class="p">,</span><span class="w"> </span><span class="s2">"shared"</span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"sourceTag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"feature:shared"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"onlyDependOnLibsWithTags"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"shared"</span><span class="p">,</span><span class="w"> </span><span class="s2">"feature:api"</span><span class="p">]</span><span class="w">
      </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<p>This tslint config will ensure that the rules defined above are mandatory.</p>

<h2 id="is-this-structure-the-only-way">Is this structure the only way?</h2>

<p>No, not at all, this would work perfectly for a monorepo with 5 applications. But if we are thinking about organisation wide monorepos, it might be a good idea to
combine features app per app. In that case we would have something like:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">apps</code></li>
  <li><code class="language-plaintext highlighter-rouge">libs</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">app1</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>â€¦</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>â€¦</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>â€¦</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">app2</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">api</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">foo</code></li>
              <li>â€¦</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">lazy</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">bar</code></li>
              <li>â€¦</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">shared</code>
            <ul>
              <li><code class="language-plaintext highlighter-rouge">baz</code></li>
              <li>â€¦</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">ui-kit</code></li>
      <li><code class="language-plaintext highlighter-rouge">utils</code>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">rxjs-operators</code></li>
          <li><code class="language-plaintext highlighter-rouge">forms</code></li>
          <li><code class="language-plaintext highlighter-rouge">http</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="how-to-share-code-organisation-wide">How to share code organisation wide?</h2>

<p>Although an organisation wide monorepo has great benefits, they might be good reasons not to do it. These could be any combination of technical, cultural, legal or other reasons.</p>

<h3 id="scenario-a">Scenario A</h3>

<p>Our company has 10 angular projects that are actively developed and share a lot of code, but also had 5 legacy projects where there is no budget to bump them to the new Angular versions and so on. There might be a few <a href="https://vuejs.org/">Vue.js</a> or <a href="https://reactjs.org/">React</a> living there as well. It might be more trouble than it is worth for your organization to manage that complexity within one big workspace. In that case we could have a workspace for the non-legacy angular projects, and that workspace would gladly welcome new projects in the future.</p>

<h3 id="scenario-b">Scenario B</h3>

<p>Our company sells custom software to different clients. Every client wants its own custom look and feel, which a lot of custom logic, but we donâ€™t want to reinvent the wheel every time.</p>

<p>In that case, we could create an Nx worspace for every client, and have one common toolkit that contains shared logic. That toolkit would live in its own monorepo and be published as an Angular package.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I hope we learned something today. How we structure our workspaces is completely up to us, and we should use something that works for us, not just pick whatever you read in some blog article ;-). If this structure doesnâ€™t make sense to you, thatâ€™s perfectly fineâ€¦ And I would love to hear your thoughts about this approach.</p>

<h2 id="special-thanks-to">Special thanks to</h2>

<p>Thanks to the people that have reviewed the article and gave great input!
I couldnâ€™t have done it without you!</p>

<ul>
  <li><a href="https://twitter.com/beeman_nl">@beeman_nl</a></li>
  <li><a href="https://twitter.com/mrjameshenry">@MrJamesHenry</a></li>
</ul>
:ET